<?php
// this is the standard template data
$templateData = array(
    'title' => $this->title,
    'resourceUri' => $this->resourceUri,
    'description' => $this->description,
    'descriptionHelper' => $this->descriptionHelper
);


$mergedRecordsResult = array();

/*
 * CITED RECORDS START
 * 
 */
$citedRecords = new Erfurt_Sparql_SimpleQuery();
$citedRecords->setProloguePart('
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX faun: <http://purl.org/net/faunistics#>
PREFIX geof: <http://www.mindswap.org/2003/owl/geo/geoFeatures.owl#>

SELECT COUNT(DISTINCT ?RecordURI) as ?RecordCount ?FamilyComment ?FamilyLabel ?GenusLabel ?SpeciesLabel ?SpeciesURI ?GenusURI ?FamilyURI ?citationSuffix
    ');

$citedRecords->setWherePart('
WHERE {

  ?RecordURI faun:identifiesAs ?SpeciesURI.
  ?RecordURI a faun:CitedRecord.
  {
  ?RecordURI faun:recordedAtLocation <' . $this->resourceUri . '> .
  ?RecordURI faun:recordedAtLocation ?LocationURI .
  }
  UNION
  {
  ?RecordURI faun:recordedAtLocation ?LocationURI .
  ?LocationURI geof:within <' . $this->resourceUri . '>.
  }
  UNION
  {
  ?RecordURI faun:recordedAtLocation ?LocationURI .
  ?LocationURI geof:within ?l1.
  ?l1 geof:within <' . $this->resourceUri . '>.
  }
  UNION
  {
  ?RecordURI faun:recordedAtLocation ?LocationURI .
  ?LocationURI geof:within ?l1.
  ?l1 geof:within ?l2.
  ?l2 geof:within <' . $this->resourceUri . '>.
  }

  ?RecordURI faun:identifiesAs ?SpeciesURI.
  ?SpeciesURI faun:subTaxonOf ?GenusURI.
  ?GenusURI faun:subTaxonOf ?FamilyURI.

  ?SpeciesURI rdfs:label ?SpeciesLabel.
  ?SpeciesURI faun:citationSuffix ?citationSuffix.
  ?GenusURI rdfs:label ?GenusLabel.
  ?FamilyURI rdfs:label ?FamilyLabel.
  ?FamilyURI rdfs:comment ?FamilyComment.
}
    ');

$citedRecords->setOrderClause('
ASC(?FamilyComment) ?SpeciesLabel
    ');

$citedRecords->setLimit('10000');

try {
    $store = OntoWiki::getInstance()->erfurt->getStore();
    $citedRecordsResult = $store->sparqlQuery($citedRecords);
} catch (Exception $e) {
    // executions failed (return nothing)
    return $e->getMessage();
}

foreach ($citedRecordsResult as $row) {
    $key = $row['SpeciesURI'];
    $row['CitedRecords'] = $row['RecordCount'];
    $row['OriginalRecords'] = "0";
    #unset($row['RecordCount']);    
    $mergedRecordsResult[$key] = $row;
}

/*
 * ORIGINAL RECORDS START
 * 
 */
$originalRecords = new Erfurt_Sparql_SimpleQuery();
$originalRecords->setProloguePart('
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX faun: <http://purl.org/net/faunistics#>
PREFIX geof: <http://www.mindswap.org/2003/owl/geo/geoFeatures.owl#>

SELECT COUNT(DISTINCT ?RecordURI) as ?RecordCount ?FamilyComment ?FamilyLabel ?GenusLabel ?SpeciesLabel ?SpeciesURI ?GenusURI ?FamilyURI ?citationSuffix
    ');

$originalRecords->setWherePart('
WHERE {

  ?RecordURI faun:identifiesAs ?SpeciesURI.
  ?RecordURI a faun:OriginalRecord.
  {
  ?RecordURI faun:recordedAtLocation <' . $this->resourceUri . '> .
  ?RecordURI faun:recordedAtLocation ?LocationURI .
  }
  UNION
  {
  ?RecordURI faun:recordedAtLocation ?LocationURI .
  ?LocationURI geof:within <' . $this->resourceUri . '>.
  }
  UNION
  {
  ?RecordURI faun:recordedAtLocation ?LocationURI .
  ?LocationURI geof:within ?l1.
  ?l1 geof:within <' . $this->resourceUri . '>.
  }
  UNION
  {
  ?RecordURI faun:recordedAtLocation ?LocationURI .
  ?LocationURI geof:within ?l1.
  ?l1 geof:within ?l2.
  ?l2 geof:within <' . $this->resourceUri . '>.
  }

  ?RecordURI faun:identifiesAs ?SpeciesURI.
  ?SpeciesURI faun:subTaxonOf ?GenusURI.
  ?GenusURI faun:subTaxonOf ?FamilyURI.

  ?SpeciesURI rdfs:label ?SpeciesLabel.
  ?SpeciesURI faun:citationSuffix ?citationSuffix.
  ?GenusURI rdfs:label ?GenusLabel.
  ?FamilyURI rdfs:label ?FamilyLabel.
  ?FamilyURI rdfs:comment ?FamilyComment.
}
    ');

$originalRecords->setOrderClause('
ASC(?FamilyComment) ?SpeciesLabel
    ');

$originalRecords->setLimit('10000');

try {
    $store = OntoWiki::getInstance()->erfurt->getStore();
    $originalRecordsResult = $store->sparqlQuery($originalRecords);
} catch (Exception $e) {
    // executions failed (return nothing)
    return $e->getMessage();
}

foreach ($originalRecordsResult as $row) {
    $key = $row['SpeciesURI'];
    if (isset($mergedRecordsResult[$key])) {
        $mergedRecordsResult[$key]['OriginalRecords'] = $row['RecordCount'];
        #echo "$key exist<br>";
    } else {
        $row['CitedRecords'] = "0";
        $row['OriginalRecords'] = $row['RecordCount'];
        unset($row['RecordCount']);    
        $mergedRecordsResult[$key] = $row;
        #echo "$key DOES NOT exist<br>";
    }
}
#var_dump($mergedRecordsResult);
#exit;

?>
<div class="box">
    <h2>
        <?php echo $this->title ?>
    </h2>
    <div class="block">
        <p><?php echo $this->partial('spiders/content.phtml', $templateData); ?></p>
    </div>
</div>
<div class="box">
    <h2>Checklist (<span class="OriginalRecordSum">??</span> Original Records / <span class="CitedRecordSum">??</span> Cited Records)</h2>
    <div class="block">
        <table class="checklist">
            <thead>
                <tr>
                    <th>Rank</th>
                    <th>Species</th>
                    <th>Original Records</th>
                    <th>Cited Records</th>
                    <th>Family</th>
                    <th>Genus</th>                    
                </tr>
            </thead>
            <tbody>
                <?php echo $this->querylist(
#                        $mergedRecordsResult,
                        $mergedRecordsResult,
                        'spiders/types/checklist-row.phtml',
                        array('isResult' => true) ); ?>
            </tbody>
        </table>
    </div>
</div>
